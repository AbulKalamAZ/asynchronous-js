// THERE IS A SPECIAL SYNTEX TO WORK WITH PROMSIES IN A MORE COMFORTABLE FASHION, CALLED 'ASYNC-AWAIT'.
// IT IS SURPRISINGLY EASY TO UNDERSTAND AND USE

// ASYNC FUNCTION

// LET'S START WITH THE 'ASYNC' KEYWORD. IT CAN BE PLACED BEFORE A FUNCTION LIKE THIS

async function asyncFuncOne() {
  return 1;
}

// THE WORD 'ASYNC' BEFORE A FUNCTION MEANS ONE SIMPLE THING, THAT IS THE FUNCTION WILL
// ALWAYS RETURNS A PROMSIE. OTHER VALUES ARE WRAPPED IN A RESOLVED PROMISE AUTOMATICALLY

// FOR INSTANCE, THIS FUNCTION RETURNS A RESOLVED PROMISE WITH RESULT OF ONE(01). LET'S TEST IT

async function asyncFuncTwo() {
  return 1;
}

asyncFuncTwo().then(result => {
  console.log(result);
});

// WE COULD EXPLICITLY RETURN A PROMISE, WHICH CAUSES THE SAME

async function asyncFuncThree() {
  return Promise.resolve(1);
}

asyncFuncThree().then(result => {
  console.log(result);
});

// SO ASYNC ENSURES THAT THE FUNCTION RETURNS A PROMISE AND WRAPS NON-PROMISE IN IT. COOL ENOUGH!
// RIGHT ?? NOT ONLY THAT, THERE'S A ANOTHER KEYWORD CALLED 'AWAIT' WHICH WORKS ONLY INSIDE OF
// ASYNC FUNCTION. LET'S HAVE A LOOK

// AWAIT

// THE SYNTAX

// AWAITS WORKS ONLY INSIDE OF ASYNC FUNCTIONS

// let value = await promise;

// THE KEYWORD 'AWAIT' MAKES JAVASCRIPT WAIT UNTILL THE PROMISE SETTLES AND RETURNS IT'S VALUE
// HERE IS AN EXAMPLE THAT RESOLVES IN 1 SECONDS

async function asyncFuncFour() {
  let promise = new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve("DONE!");
    }, 1000);
  });

  let result = await promise; // *****

  console.log(result);
}

asyncFuncFour();

// THE FUNCTION EXECUTION PAUSES AT THE (***) LINE AND RESUMES WHEN THE PROMISE SETTLES. AND
// THE RESULT BECOMES IT RESULT. SO THE CODE ABOVE SHOWS 'DONE!' IN ONE(01) SECONDS

//LET'S EMPHASIZE: THE KEYWORD 'AWAIT' LITERALLY MAKES JAVASCRIPT WAIT UNTILL THE PROMISE
// SETTLES WITH THE RESULT. AFTERWARDS, IT DOESN'T COST ANY CPU RESOURCES BECAUSE JS ENGIN CAN DO
// OTHER TASKS IN THE MEANTIME: EXECUTE OTHER SCRIPT, HANDLING EVENTS, ETC

// IT'S MORE EASIER TO READ, WRITE AND ELEGANT WAY TO GET PROMISE RESULT THAN PROMISE.THEN()
