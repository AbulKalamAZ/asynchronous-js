// A PROMISE HANDLERS .THEN / .CATCH / .FINALLY ARE ALWAYS ASYNCHRONOUS. EVEN WHEN A PROMISE
// RESOLVES IMMEDIATELY, THE LINES BELOW THE .THEN / .CATCH / .FINALLY HANDLERS ARE EXECUTED
// BEFORE THE HANDLERS. HERE'S AN EXAMPLE OF THIS FACT

let promise = new Promise((resolve, reject) => {
  resolve(); //resolves this promise asap
});

promise
  .then(result => console.log("flag one"))
  .then(result => console.log("flag two"));

console.log("I will be printed before you");

// IF YOU RUN THIS, YOU WILL SEE 'I WILL BE PRINTED...' FIRST, AND AFTERWARDS 'IMMEDIATELY RESOLVED ..'
// WHY THIS IS HAPPENING ? THE PROMISE IS RESOLVED AT THE VERY BEGINING, THEN WHY IT WILL BE PRINTED
// AFTERWARDS ? WHATS GOING ON HERE

// MICROTASKS QUEUE

// ASYNCHRONOUS TASK IN JAVASCRIPT NEED PROPER MANAGEMENT. FOR THAT, ECMA STANDARD SPECIFIES A STANDARD
// CALLED 'PROMSIEJOB', MORE OFTEN REFFERED AS 'MICROTASKS QUEUE'

// AS STATED IN THE SPECIFICATION
// # THE QUEUE IS FIRST-IN-FIRST-OUT QUEUE, THAT MEANS THE TASK EQUEUED FIRST WILL BE EXECUTED
//   FIRST
// # EXECUTION OF TASK IS INITIATED WHEN NOTHING ELSE IS LEFT TO BE RUN

// OR, TO SAY MORE SIMPLY, WHEN A PROMISE IS READY, IT'S HANDLERS (.THEN / .CATCH / .FINALLY) ARE
// KEPT IN THE QUEUE. AFTERWARDS, WHEN JAVASCRIPT ENGIN GET FREE, IT TAKES HANDLER FORM THE QUEUE
// AND EXECUTES. THAT'S WHY 'I WILL BE PRINTED BEFORE YOU' GET PRINTED FIRST IN THE ABOVE EXAMPLE

// PROMISE HANDLERS ALWAYS GO THROUGH THIS QUEUE. IF THERE'S CHAIN OF MULTIPLE HANDLERS. THE FIRST
// HANDLER IN THE CHAIN GET ENQUEUED FIRST AND EXECUTED FIRST. AND IF WE WANT TO PRINT REST CODE
// AFTER THE PROMISE HANDLER EXECUTION, JUST SIMPLY PUT THE CODE INSIDE OF A .THEN HANDLER
// LIKE BELOW

let promiseOne = new Promise((resolve, reject) => {
  resolve(); //resolves this promise asap
});

promiseOne
  .then(result => console.log("flag one"))
  .then(result => console.log("flag two"))
  .then(result => console.log("I will be printed before you"));

// 'I WILL BE PRINTED BEFORE YOU' WILL BE PRINTED AFTER THE EXECUTION OF ALL .THEN HANDLERS, AS
// IT IS INSIDE ANOTHER .THEN HANDLER

// SUMMARY

// PROMSIE HANDLERS ARE ALWAYS ASYNCHRONOUS. ALL THE HANDLERS (.THEN / .CATCH / .FINALLY) ARE
// ENQUEUED IN A QUEUE CALLED 'PROMISE JOB', ALSO KNOWN AS 'MICROTASKS'. AND THE CODE IN THE QUEUE
// RUNS WHEN REST OF THE CODE ARE EXECUTED.

// IF YOU WANT MAKE SURE SOME CODE RUN AFTER THE EXECUTION OF HANDLER, JUST CHAINED THEM WITH A
// .THEN HANDLER METHOD.

// IN MOST OF JAVASCRIPT ENGINS, INCLUDING BROWSERS AND NODE, THE CONCEPT OF 'MICROTASKS' ARE CLOSELY
// TIED WITH 'EVENT LOOP' AND 'MACROTASK', THOUGH THEY HAVE NO DIRECT RELATION TO PROMISE
